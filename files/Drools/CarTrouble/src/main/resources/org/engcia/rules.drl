/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.engcia;

import org.engcia.model.Hypothesis;
import org.engcia.model.Evidence;
import org.engcia.model.Conclusion;
import org.engcia.model.Symptom;
import org.engcia.model.Fact;

import function org.engcia.view.UI.answer;
import function org.engcia.view.UI.symptomHandling;

query "Conclusions"
	$conclusion : Conclusion()
end

rule "IsFlow1"
	when
		Evidence(value == Evidence.P0341) or
		Evidence(value == Evidence.P0342) or
		Evidence(value == Evidence.P0343)
	then
		insert(new Evidence(Evidence.FLOW_1));
end

rule "IsFlow2"
	when
		Evidence(value == Evidence.P0344)
	then
		insert(new Evidence(Evidence.FLOW_2));
end

rule "SymptomHandling"
    when
        Evidence(value == Evidence.P0340)
        not Evidence(value == Evidence.FLOW_1)
        not Evidence(value == Evidence.FLOW_2)
    then
        symptomHandling();
end

rule "IsBatteryF1"
	when
		Evidence(value == Evidence.FLOW_1)
		eval(answer(Hypothesis.BATTERY_VOLTAGE_BELOW_12V_14V, "yes"))
	then
		insert(new Conclusion(Conclusion.BATTERY_PROBLEM));
end

rule "IsntBatteryF1"
	when
		Evidence(value == Evidence.FLOW_1)
		eval(answer(Hypothesis.BATTERY_VOLTAGE_BELOW_12V_14V, "no"))
	then
		insert(new Evidence(Evidence.BATTERY_VOLTAGE_NOT_BELOW_12V_14V));
end

rule "IsSensor5VF1"
    when
        Evidence(value == Evidence.FLOW_1)
		Evidence(value == Evidence.BATTERY_VOLTAGE_NOT_BELOW_12V_14V)
		eval(answer(Hypothesis.SENSOR_5V, "yes"))
	then
		insert(new Conclusion(Conclusion.SENSOR_PROBLEM_REPLACE));
end

rule "IsntSensor5VF1"
    when
		Evidence(value == Evidence.FLOW_1)
		Evidence(value == Evidence.BATTERY_VOLTAGE_NOT_BELOW_12V_14V)
		eval(answer(Hypothesis.SENSOR_5V, "no"))
	then
		insert(new Evidence(Evidence.SENSOR_NOT_AT_5V));
end

rule "IsSensorCorrosionF1"
    when
        Evidence(value == Evidence.FLOW_1)
		Evidence(value == Evidence.SENSOR_NOT_AT_5V)
		eval(answer(Hypothesis.SENSOR_CORROSION_OIL, "yes"))
	then
		insert(new Conclusion(Conclusion.SENSOR_PROBLEM_CLEAN));
end

rule "IsntSensorCorrosionF1"
    when
        Evidence(value == Evidence.FLOW_1)
		Evidence(value == Evidence.SENSOR_NOT_AT_5V)
		eval(answer(Hypothesis.SENSOR_CORROSION_OIL, "no"))
	then
		insert(new Evidence(Evidence.SENSOR_WITHOUT_CORROSION_OIL));
end

rule "IsSensorShortedF1"
    when
		Evidence(value == Evidence.FLOW_1)
		Evidence(value == Evidence.SENSOR_WITHOUT_CORROSION_OIL)
		eval(answer(Hypothesis.SHORT_CIRCUIT, "yes"))
	then
		insert(new Conclusion(Conclusion.SENSOR_PROBLEM_REPLACE));
end

rule "IsntSensorShortedF1"
    when
		Evidence(value == Evidence.FLOW_1)
		Evidence(value == Evidence.SENSOR_WITHOUT_CORROSION_OIL)
		eval(answer(Hypothesis.SHORT_CIRCUIT, "no"))
	then
		insert(new Evidence(Evidence.NO_SHORT_CIRCUIT));
end

rule "AreCablesGoodF1"
    when
		Evidence(value == Evidence.FLOW_1)
		Evidence(value == Evidence.NO_SHORT_CIRCUIT)
		eval(answer(Hypothesis.CABLE_MISSING_DISCONNECTED, "yes"))
	then
		insert(new Conclusion(Conclusion.FAULTY_WIRES));
end

rule "ArentCablesGoodF1"
    when
		Evidence(value == Evidence.FLOW_1)
		Evidence(value == Evidence.NO_SHORT_CIRCUIT)
		eval(answer(Hypothesis.CABLE_MISSING_DISCONNECTED, "no"))
	then
		insert(new Conclusion(Conclusion.FAULTY_ECU));
end

rule "IsSensorCorrosionF2"
    when
        Evidence(value == Evidence.FLOW_2)
		eval(answer(Hypothesis.SENSOR_CORROSION, "yes"))
	then
		insert(new Conclusion(Conclusion.SENSOR_PROBLEM_CLEAN));
end

rule "IsntSensorCorrosionF2"
    when
        Evidence(value == Evidence.FLOW_2)
		eval(answer(Hypothesis.SENSOR_CORROSION, "no"))
	then
		insert(new Evidence(Evidence.SENSOR_WITHOUT_CORROSION));
end

rule "Is5VF2"
    when
		Evidence(value == Evidence.FLOW_2)
		Evidence(value == Evidence.SENSOR_WITHOUT_CORROSION)
		eval(answer(Hypothesis.SENSOR_5V, "yes"))
	then
		insert(new Evidence(Evidence.SENSOR_AT_5V));
end

rule "Isnt5VF2"
    when
		Evidence(value == Evidence.FLOW_2)
		Evidence(value == Evidence.SENSOR_WITHOUT_CORROSION)
		eval(answer(Hypothesis.SENSOR_5V, "no"))
	then
        insert(new Conclusion(Conclusion.INCOMPLETE_WIRING));
        insert(new Conclusion(Conclusion.ECU_ERROR));
        insert(new Conclusion(Conclusion.ECU_NOT_PLUGGED));
        insert(new Conclusion(Conclusion.BATTERY_PROBLEM));
end

rule "Is5V-IO-COF2"
    when
		Evidence(value == Evidence.FLOW_2)
		Evidence(value == Evidence.SENSOR_AT_5V)
		eval(answer(Hypothesis.SENSOR_5V_IGNITION_ON_CONNECTOR_UNPLUGGED, "yes"))
	then
		insert(new Evidence(Evidence.SENSOR_NOT_AT_5V_IGNITION_ON_CONNECTOR_UNPLUGGED));
end

rule "Isnt5V-IO-COF2"
    when
		Evidence(value == Evidence.FLOW_2)
		Evidence(value == Evidence.SENSOR_AT_5V)
		eval(answer(Hypothesis.SENSOR_5V_IGNITION_ON_CONNECTOR_UNPLUGGED, "no"))
	then
        insert(new Conclusion(Conclusion.INCOMPLETE_WIRING));
        insert(new Conclusion(Conclusion.ECU_ERROR));
        insert(new Conclusion(Conclusion.ECU_NOT_PLUGGED));
        insert(new Conclusion(Conclusion.BATTERY_PROBLEM));
end

rule "IsSensorDamagedF2"
    when
		Evidence(value == Evidence.FLOW_2)
		Evidence(value == Evidence.SENSOR_NOT_AT_5V_IGNITION_ON_CONNECTOR_UNPLUGGED)
		eval(answer(Hypothesis.GROUND_WIRE_GROUNDED, "yes"))
	then
		insert(new Conclusion(Conclusion.SENSOR_DAMAGED));
end

rule "IsntSensorDamagedF2"
    when
		Evidence(value == Evidence.FLOW_2)
		Evidence(value == Evidence.SENSOR_NOT_AT_5V_IGNITION_ON_CONNECTOR_UNPLUGGED)
		eval(answer(Hypothesis.GROUND_WIRE_GROUNDED, "no"))
	then
        insert(new Conclusion(Conclusion.INCOMPLETE_WIRING));
        insert(new Conclusion(Conclusion.ECU_ERROR));
        insert(new Conclusion(Conclusion.ECU_NOT_PLUGGED));
        insert(new Conclusion(Conclusion.BATTERY_PROBLEM));
end

rule "unknown_problem"
	when
		not Conclusion()
	then
		Conclusion c = new Conclusion(Conclusion.UNKNOWN_PROBLEM);
		insert(c);
end

query "hypothesis"(String ev, String v)
	h : Hypothesis( hypothesis == ev, value == v )
end
